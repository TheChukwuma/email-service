{
  "info": {
    "name": "Email Service API - Integration Tests",
    "description": "Comprehensive test collection for Email Service API including authentication, email sending, attachments, and admin functions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "apiKey",
      "value": "",
      "type": "string"
    },
    {
      "key": "jwtToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": [
      {
        "key": "key",
        "value": "X-Api-Key",
        "type": "string"
      },
      {
        "key": "value",
        "value": "{{apiKey}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Setup SuperAdmin (One-time)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"superadmin\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"securepassword123\",\n  \"setupSecret\": \"your-setup-secret\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/setup/superadmin",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "setup", "superadmin"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.test('SuperAdmin setup successful', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.username).to.equal('superadmin');",
                  "        pm.expect(response.data.role).to.equal('SUPERADMIN');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"USER_TENANT\",\n  \"tenantId\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('userId', response.data.id);",
                  "    pm.test('User registered successfully', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User with Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwtToken', response.data.token);",
                  "    pm.test('Login with username successful', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.token).to.exist;",
                  "        pm.expect(response.data.username).to.equal('testuser');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login User with Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"test@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('jwtToken', response.data.token);",
                  "    pm.test('Login with email successful', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.token).to.exist;",
                  "        pm.expect(response.data.username).to.equal('testuser');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Generate API Key",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"keyName\": \"Test API Key\",\n  \"expiresAt\": \"2025-12-31T23:59:59\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/api-key",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "auth", "api-key"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('apiKey', response.data.apiKey);",
                  "    pm.test('API Key generated', () => {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.apiKey).to.exist;",
                  "        pm.expect(response.data.keyName).to.equal('Test API Key');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Email Sending",
      "item": [
        {
          "name": "Send Simple Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": [\"recipient@example.com\"],\n  \"subject\": \"Test Email\",\n  \"body\": \"This is a test email from the API.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email sent successfully', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.collectionVariables.set('emailId', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email with Regular Attachment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Email with PDF Attachment\",\n  \"body\": \"Please find the attached document.\",\n  \"attachments\": [\n    {\n      \"base64Content\": \"JVBERi0xLjQKJcfsj6IKNSAwIG9iago8PAovVHlwZSAvUGFnZQovUGFyZW50IDMgMCBSCi9SZXNvdXJjZXMgPDwKL0ZvbnQgPDwKL0YxIDYgMCBSCj4+Cj4+Ci9NZWRpYUJveCBbMCAwIDU5NSA4NDJdCi9Db250ZW50cyA3IDAgUgo+PgplbmRvYmoKNiAwIG9iago8PAovVHlwZSAvRm9udAovU3VidHlwZSAvVHlwZTEKL0Jhc2VGb250IC9IZWx2ZXRpY2EKPj4KZW5kb2JqCjcgMCBvYmoKPDwKL0xlbmd0aCA0NAo+PgpzdHJlYW0KQlQKL0YxIDEyIFRmCjcyIDcyMCBUZAooSGVsbG8gV29ybGQpIFRqCkVUCmVuZHN0cmVhbQplbmRvYmoKMyAwIG9iago8PAovVHlwZSAvUGFnZXMKL0NvdW50IDEKL0tpZHMgWzUgMCBSXQo+PgplbmRvYmoKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjIgMCBvYmoKPDwKL1R5cGUgL0V4dEdTdGF0ZQo+PgplbmRvYmoKeHJlZgowIDgKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwNTggMDAwMDAgbiAKMDAwMDAwMDExNSAwMDAwMCBuIAowMDAwMDAwMjQwIDAwMDAwIG4gCjAwMDAwMDAzNjUgMDAwMDAgbiAKMDAwMDAwMDQ5MCAwMDAwMCBuIAowMDAwMDAwNjQ1IDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgOAovUm9vdCAxIDAgUgo+PgpzdGFydHhyZWYKNzM5CiUlRU9G\",\n      \"filename\": \"test-document.pdf\",\n      \"mimeType\": \"application/pdf\",\n      \"description\": \"Test PDF document\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email with attachment sent', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email with Inline Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Email with Inline Image\",\n  \"body\": \"<html><body><h1>Welcome!</h1><p>Here's our logo:</p><img src=\\\"cid:company-logo\\\" alt=\\\"Company Logo\\\" width=\\\"200\\\"></body></html>\",\n  \"attachments\": [\n    {\n      \"base64Content\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\",\n      \"filename\": \"logo.png\",\n      \"mimeType\": \"image/png\",\n      \"inline\": true,\n      \"cid\": \"company-logo\",\n      \"description\": \"Company logo for inline display\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email with inline image sent', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email with Multiple Attachments",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Report with Charts and Data\",\n  \"body\": \"<html><body><h1>Monthly Report</h1><p>Please find the attached report and see the chart below:</p><img src=\\\"cid:chart1\\\" alt=\\\"Sales Chart\\\" width=\\\"400\\\"><p>Best regards,<br>Team</p></body></html>\",\n  \"attachments\": [\n    {\n      \"base64Content\": \"JVBERi0xLjQKJcfsj6IKNSAwIG9iago8PAovVHlwZSAvUGFnZQovUGFyZW50IDMgMCBSCi9SZXNvdXJjZXMgPDwKL0ZvbnQgPDwKL0YxIDYgMCBSCj4+Cj4+Ci9NZWRpYUJveCBbMCAwIDU5NSA4NDJdCi9Db250ZW50cyA3IDAgUgo+PgplbmRvYmoKNiAwIG9iago8PAovVHlwZSAvRm9udAovU3VidHlwZSAvVHlwZTEKL0Jhc2VGb250IC9IZWx2ZXRpY2EKPj4KZW5kb2JqCjcgMCBvYmoKPDwKL0xlbmd0aCA0NAo+PgpzdHJlYW0KQlQKL0YxIDEyIFRmCjcyIDcyMCBUZAooSGVsbG8gV29ybGQpIFRqCkVUCmVuZHN0cmVhbQplbmRvYmoKMyAwIG9iago8PAovVHlwZSAvUGFnZXMKL0NvdW50IDEKL0tpZHMgWzUgMCBSXQo+PgplbmRvYmoKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMyAwIFIKPj4KZW5kb2JqCjIgMCBvYmoKPDwKL1R5cGUgL0V4dEdTdGF0ZQo+PgplbmRvYmoKeHJlZgowIDgKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwNTggMDAwMDAgbiAKMDAwMDAwMDExNSAwMDAwMCBuIAowMDAwMDAwMjQwIDAwMDAwIG4gCjAwMDAwMDAzNjUgMDAwMDAgbiAKMDAwMDAwMDQ5MCAwMDAwMCBuIAowMDAwMDAwNjQ1IDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgOAovUm9vdCAxIDAgUgo+PgpzdGFydHhyZWYKNzM5CiUlRU9G\",\n      \"filename\": \"monthly-report.pdf\",\n      \"mimeType\": \"application/pdf\",\n      \"description\": \"Monthly sales report\"\n    },\n    {\n      \"base64Content\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\",\n      \"filename\": \"sales-chart.png\",\n      \"mimeType\": \"image/png\",\n      \"inline\": true,\n      \"cid\": \"chart1\",\n      \"description\": \"Sales performance chart\",\n      \"optimizeImage\": true\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email with multiple attachments sent', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email to Multiple Recipients",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"newsletter@example.com\",\n  \"to\": [\"user1@example.com\", \"user2@example.com\", \"user3@example.com\"],\n  \"cc\": [\"manager@example.com\"],\n  \"bcc\": [\"audit@example.com\"],\n  \"subject\": \"Monthly Newsletter - Multiple Recipients\",\n  \"body\": \"<html><body><h1>Monthly Newsletter</h1><p>This email is being sent to multiple recipients using the new multiple TO addresses feature.</p><p>Recipients: user1@example.com, user2@example.com, user3@example.com</p></body></html>\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email sent to multiple recipients', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.expect(response.data.toAddresses).to.be.an('array');",
                  "    pm.expect(response.data.toAddresses).to.have.lengthOf(3);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Email Management",
      "item": [
        {
          "name": "Get Email Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/emails/{{emailId}}",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "{{emailId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email status retrieved', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.expect(response.data.status).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Emails by Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/emails?status=SENT&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails"],
              "query": [
                {
                  "key": "status",
                  "value": "SENT"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Emails by status retrieved', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.content).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Template Management",
      "item": [
        {
          "name": "Create Template",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"welcome-template\",\n  \"subjectTemplate\": \"Welcome {{name}}!\",\n  \"bodyTemplate\": \"<html><body><h1>Welcome {{name}}!</h1><p>Thank you for joining us, {{name}}. We're excited to have you on board!</p><p>Best regards,<br>The Team</p></body></html>\",\n  \"bodyType\": \"HTML\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/templates",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "templates"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Template created', () => {",
                  "    pm.expect(pm.response.code).to.equal(201);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.collectionVariables.set('templateId', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email with Template",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Api-Key",
                "value": "{{apiKey}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"templateName\": \"welcome-template\",\n  \"templateVars\": {\n    \"name\": \"John Doe\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Templated email sent', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Attachment Management",
      "item": [
        {
          "name": "Upload Attachment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"base64Content\": \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==\",\n  \"filename\": \"test-image.png\",\n  \"contentType\": \"image/png\",\n  \"storageType\": \"CLOUDINARY\",\n  \"optimizeImage\": true,\n  \"generateThumbnail\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/attachments/upload-base64",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "attachments", "upload-base64"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Attachment uploaded', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data.id).to.exist;",
                  "    pm.collectionVariables.set('attachmentId', response.data.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get My Attachments",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/attachments/my-attachments",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "attachments", "my-attachments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Attachments retrieved', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Send Email - Invalid Base64",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Test Email\",\n  \"body\": \"This is a test email.\",\n  \"attachments\": [\n    {\n      \"base64Content\": \"invalid-base64-content!\",\n      \"filename\": \"test.pdf\",\n      \"mimeType\": \"application/pdf\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid base64 rejected', () => {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.message).to.include('base64');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email - File Too Large",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Test Email\",\n  \"body\": \"This is a test email.\",\n  \"attachments\": [\n    {\n      \"base64Content\": \"{{$randomLoremText}}\",\n      \"filename\": \"large-file.pdf\",\n      \"mimeType\": \"application/pdf\"\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Large file rejected', () => {",
                  "    pm.expect(pm.response.code).to.equal(400);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.false;",
                  "    pm.expect(response.message).to.include('size');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Send Email - Unauthorized",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from\": \"test@example.com\",\n  \"to\": \"recipient@example.com\",\n  \"subject\": \"Test Email\",\n  \"body\": \"This is a test email.\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/emails/send",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "emails", "send"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized request rejected', () => {",
                  "    pm.expect(pm.response.code).to.equal(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Admin Functions",
      "item": [
        {
          "name": "Get System Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/admin/statistics",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "admin", "statistics"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Statistics retrieved', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "    pm.expect(response.data).to.have.property('totalEmails');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Cleanup Expired Attachments",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/attachments/cleanup",
              "host": ["{{baseUrl}}"],
              "path": ["v1", "attachments", "cleanup"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Cleanup started', () => {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
